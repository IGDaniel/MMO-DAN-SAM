<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = false;
target_x = x;
target_y = y;

//Set the speed of the player (MUST CHANGE NETWORK PLAYER ASWELL)
spd = 5;

//Image speed (MUST CHANGE NETWORK PLAYER ASWELL)
image_speed = 0;

scr_get_input();


//no () after setting a scr as state
state = scr_move_state;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the player
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send Health network
var health_packet = buffer_create(1, buffer_grow, 1);
buffer_write(health_packet, buffer_string, "health");
buffer_write(health_packet, buffer_s32, health);
network_write(Network.socket, health_packet);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send attack
var attack_packet = buffer_create(1, buffer_grow, 1);
buffer_write(attack_packet, buffer_string, "attack");
buffer_write(attack_packet, buffer_s32, attack);
network_write(Network.socket, attack_packet);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Network Send Update Player Position
var pos_packet = buffer_create(1, buffer_grow, 1);
buffer_write(pos_packet, buffer_string, "pos");
buffer_write(pos_packet, buffer_s32, target_x);
buffer_write(pos_packet, buffer_s32, target_y);
network_write(Network.socket, pos_packet);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///defense send network
var defense_packet = buffer_create(1, buffer_grow, 1);
buffer_write(defense_packet, buffer_string, "defense");
buffer_write(defense_packet, buffer_s32, defense);
network_write(Network.socket, defense_packet);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gold send
var gold_packet = buffer_create(1, buffer_grow, 1);
buffer_write(gold_packet, buffer_string, "gold");
buffer_write(gold_packet, buffer_s32, gold);
network_write(Network.socket, gold_packet);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crystals send network
var crystals_packet = buffer_create(1, buffer_grow, 1);
buffer_write(crystals_packet, buffer_string, "crystals");
buffer_write(crystals_packet, buffer_s32, crystals);
network_write(Network.socket, crystals_packet);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///level send network
var level_packet = buffer_create(1, buffer_grow, 1);
buffer_write(level_packet, buffer_string, "level");
buffer_write(level_packet, buffer_s32, level);
network_write(Network.socket, level_packet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(view_xport[0] + view_yport[0] + 0, 0, "Health: ");
draw_text(view_xport[0] + view_yport[0] + 90, 0, other.health);

draw_text(view_xport[0] + view_yport[0] + 0, 20, "Attack: ");
draw_text(view_xport[0] + view_yport[0] + 90, 20, other.attack);

draw_text(view_xport[0] + view_yport[0] + 0, 40, "Defense: ");
draw_text(view_xport[0] + view_yport[0] + 90, 40, other.defense);

draw_text(view_xport[0] + view_yport[0] + 0, 60, "Gold: ");
draw_text(view_xport[0] + view_yport[0] + 90, 60, other.gold);

draw_text(view_xport[0] + view_yport[0] + 0, 80, "Crystals: ");
draw_text(view_xport[0] + view_yport[0] + 90, 80, other.crystals);

draw_text(view_xport[0] + view_yport[0] + 0, 100, "Level: ");
draw_text(view_xport[0] + view_yport[0] + 90, 100, other.level);

draw_text(view_xport[0] + view_yport[0] + 0, 140, "Cheats (Use F numbers to go positive and Numpad for negative)");
draw_text(view_xport[0] + view_yport[0] + 0, 160, "1 = Health");
draw_text(view_xport[0] + view_yport[0] + 0, 180, "2 = Attack");
draw_text(view_xport[0] + view_yport[0] + 0, 200, "3 = Defense");
draw_text(view_xport[0] + view_yport[0] + 0, 220, "4 = Gold");
draw_text(view_xport[0] + view_yport[0] + 0, 240, "5 = Crystals");
draw_text(view_xport[0] + view_yport[0] + 0, 260, "6 = Level");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_debug_test();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draws self and name
draw_self();
draw_text(x - (string_width(name) / 2), y - 55, name);

//draw shadow
draw_sprite(spr_player_shadow, image_index, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
